# This is a basic workflow to help you get started with Actions

name: DevSecOps CI/CD Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ dev ]
    paths:
      - "src/backend/**"
  pull_request:
    branches: [ dev ]
    paths:
      - "src/backend/**"


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # Automated unit testing and linting
  Automated-code-checks:
    name    : Automated linting & testing
    runs-on : ubuntu-latest
    env:
      working-directory: ./src/backend
    steps:
      # Checkout source code from repo
      - name: Checkout out Git repo
        id: checkout-repository
        uses: actions/checkout@v2

      # Set up python 3.8.2
      - name: Set up Python 3.8.2
        id: install-python
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: "3.8.2"
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: "x64"
      
      # Verify installation of specified python version
      - name: Display Python version
        id: verify-python-installation
        run : python -c "import sys; print(sys.version)"

      # Pip install python packages
      - name: Install Python dependencies
        run : |
          python -m pip install --upgrade pip
          pip install flake8 pytest --upgrade

      # Linting Python code
      - name: Lint with flake8
        working-directory: ${{ env.working-directory }}
        run : |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # # Run automated test scripts
      # - name: Test code with pytest
      #   run: |
      #       pytest

      # # Run automated code review

  # Workflow to trigger CodeQL SAST scan
  SAST-scan:
    runs-on: ubuntu-latest
    steps: 
     # Checkout code from repository
     - name: Checkout repository
       id: checkout-repository
       uses: actions/checkout@v2
       
     # Initialize CodeQL
     - name: Initialize CodeQL
       id: init-codeql
       uses: github/codeql-action/init@v1
       with:
        lanugages: python
        queries: security-and-quality
       
     # Perform CodeQL Analysis
     - name: Perform CodeQL Analysis
       id: analyze-codeql
       uses: github/codeql-action/analyze@v1
    
     # Perform Container Scan
     - name: Build docker image
       id: build-docker-image
       working-directory: ./src/backend/server
       run: docker build -t thea-manager .

     # Perform Synk Container Analysis
     - name: Scan docker image for vulnerabilities
       continue-on-error: true
       uses: snyk/actions/docker@master
       env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
       with:
        image: thea-manager
        args: --file=./src/backend/server/Dockerfile
    
     # Upload results to github code scanning
     - name: Upload result to GitHub Code Scanning
       uses: github/codeql-action/upload-sarif@v1
       with:
         sarif_file: snyk.sarif


#   # Workflow to trigger ZAP DAST scan
#   DAST-scan:
#     runs-on: ubuntu-latest
#     env:
#       working-directory: ./thea_manager_backend/src
#     steps:
#       # Checkout source code from repo
#       - name: Checkout out Git repo
#         id: checkout-repository
#         uses: actions/checkout@v2

#       # Set up python 3.8.2
#       - name: Set up Python 3.8.2
#         id: install-python
#         uses: actions/setup-python@v2
#         with:
#           # Semantic version range syntax or exact version of a Python version
#           python-version: "3.8.2"
#           # Optional - x64 or x86 architecture, defaults to x64
#           architecture: "x64"
      
#       # Verify installation of specified python version
#       - name: Display Python version
#         id: verify-python-installation
#         run : python -c "import sys; print(sys.version)"

#       # Pip install python packages
#       - name: Install Python dependencies
#         working-directory: ${{ env.working-directory }}
#         run : |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt

#       # Install python dependencies
#       - name: Run Flask Application
#         working-directory: ${{ env.working-directory }}
#         run: |
#           python application.py

#       # DAST Web app scan
#       - name: Scan Flask Application
#         uses: zaproxy/action-full-scan@v0.2.0
#         with:
#           target: "http:localhost:5000"
